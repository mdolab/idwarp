!    -*- f90 -*-
! Note: the context of this file is case sensitive.
#ifdef USE_COMPLEX
python module libidwarp_cs ! in 
#else
python module libidwarp ! in 
#endif
    interface  ! in :idwarp

       subroutine initpetsc(comm)
         integer(kind=inttype) :: comm
       end subroutine initpetsc

       subroutine createcommongrid(volnodes,nvollocal) ! in :test:createGrid.F90
         real(kind=realtype) dimension(3,nvollocal),intent(in) :: volnodes
         integer(kind=inttype), optional,intent(in),check(shape(volnodes,1)==nvollocal),depend(volnodes) :: nvollocal=shape(volnodes,1)
       end subroutine createcommongrid

       subroutine processstructuredpatches
       end subroutine processstructuredpatches

       subroutine processunstructuredpatches
       end subroutine processunstructuredpatches

       subroutine deallocatepatchio
       end subroutine deallocatepatchio

       subroutine readcgns(cgns_file)
         character*(*) :: cgns_file
       end subroutine readcgns

       subroutine readplot3d(plot3d_file)
         character*(*) :: plot3d_file
       end subroutine readplot3d

       subroutine readplot3dsurface(plot3d_file)
         character*(*) :: plot3d_file
       end subroutine readplot3dsurface

       subroutine setexternalmeshindices(ndof_solver,solver_indices)
         integer(kind=inttype) optional,intent(in),check(len(solver_indices)>=ndof_solver),depend(solver_indices) :: ndof_solver=len(solver_indices)
         integer(kind=inttype) dimension(ndof_solver),intent(in) :: solver_indices
       end subroutine setexternalmeshindices
       
       subroutine getvolumecoordinates(gridnodes,ndof) ! in getVolumeCoordinates.F90
         real(kind=realtype) dimension(ndof),intent(out),depend(ndof) :: gridnodes
         integer(kind=inttype) intent(in) :: ndof
       end subroutine getvolumecoordinates

       subroutine getcommonvolumecoordinates(gridnodes,ndof) ! in getCommonvolumeCoordinates.F90
         real(kind=realtype) dimension(ndof),intent(out),depend(ndof) :: gridnodes
         integer(kind=inttype) intent(in) :: ndof
       end subroutine getcommonvolumecoordinates

       subroutine initializewarping(pts,uniquepts,link,facesizes,faceconn,ndoflocal,nunique,nlink,nfacesizes,nfaceconn,restartfile) ! in :test:initializeWarping.F90
         real(kind=realtype) dimension(ndoflocal),intent(in) :: pts
         real(kind=realtype) dimension(3,nunique),intent(in) :: uniquepts
         integer(kind=inttype) dimension(nlink),intent(in) :: link
         integer(kind=inttype) dimension(nfacesizes),intent(in) :: facesizes
         integer(kind=inttype) dimension(nfaceconn),intent(in) :: faceconn
         integer(kind=inttype), optional,intent(in),check(len(pts)>=ndoflocal),depend(pts) :: ndoflocal=len(pts)
         integer(kind=inttype), optional,intent(in),check(shape(uniquepts,1)==nunique),depend(uniquepts) :: nunique=shape(uniquepts,1)
         integer(kind=inttype), optional,intent(in),check(len(link)>=nlink),depend(link) :: nlink=len(link)
         integer(kind=inttype), optional,intent(in),check(len(facesizes)>=nfacesizes),depend(facesizes) :: nfacesizes=len(facesizes)
         integer(kind=inttype), optional,intent(in),check(len(faceconn)>=nfaceconn),depend(faceconn) :: nfaceconn=len(faceconn)
         character*(*) :: restartfile
       end subroutine initializewarping

       subroutine setsymmetryplanes(pts,normals,n) ! in :test:initializeWarping.F90
         real(kind=realtype) dimension(3,n),intent(in) :: pts
         real(kind=realtype) dimension(3,n),intent(in),depend(n) :: normals
         integer(kind=inttype), optional,intent(in),check(shape(pts,1)==n),depend(pts) :: n=shape(pts,1)
       end subroutine setsymmetryplanes

       subroutine warpmesh()
       end subroutine warpmesh

       subroutine setsurfacecoordinates(coordinates, cdof) ! in :test:setSurfaceCoordinatesLocal.f90
         real(kind=realtype) dimension(cdof),intent(in) :: coordinates
         integer(kind=inttype) optional,intent(in),check(len(coordinates)>=cdof),depend(coordinates) :: cdof=len(coordinates)
       end subroutine setsurfacecoordinates
     
       subroutine getsurfacecoordinates(coordinates,cdof) ! in :test:getSurfaceCoordinates.F90
         real(kind=realtype) dimension(cdof),intent(inout) :: coordinates
         integer(kind=inttype) optional,intent(in),check(len(coordinates)>=cdof),depend(coordinates) :: cdof=len(coordinates)
       end subroutine getsurfacecoordinates
       
       subroutine warp_to_solver_grid(warp_grid,wdof,solver_grid,sdof) ! in :test:gridTransform.F90
         real(kind=realtype) dimension(wdof),intent(in) :: warp_grid
         integer(kind=inttype) optional,intent(in),check(len(warp_grid)>=wdof),depend(warp_grid) :: wdof=len(warp_grid)
         real(kind=realtype) dimension(sdof),intent(inout) :: solver_grid
         integer(kind=inttype) optional,intent(in),check(len(solver_grid)>=sdof),depend(solver_grid) :: sdof=len(solver_grid)
       end subroutine warp_to_solver_grid

       subroutine solver_to_warp_grid(solver_grid,sdof,warp_grid,wdof) ! in :test:gridTransform.F90
         real(kind=realtype) dimension(sdof),intent(in) :: solver_grid
         integer(kind=inttype) optional,intent(in),check(len(solver_grid)>=sdof),depend(solver_grid) :: sdof=len(solver_grid)
         real(kind=realtype) dimension(wdof),intent(inout) :: warp_grid
         integer(kind=inttype) optional,intent(in),check(len(warp_grid)>=wdof),depend(warp_grid) :: wdof=len(warp_grid)
       end subroutine solver_to_warp_grid

       subroutine warpderiv(dxv_f,ndof_warp)
         real(kind=realtype) dimension(ndof_warp) :: dxv_f
         integer(kind=inttype) optional,check(len(dxv_f)>=ndof_warp),depend(dxv_f) :: ndof_warp=len(dxv_f)
       end subroutine warpderiv

       subroutine warpderivfwd(xsdot,cdof,outvec,warpmeshdof) ! in :test:warpMeshd.F90
         real(kind=realtype) dimension(cdof),intent(in) :: xsdot
         integer(kind=inttype), optional,intent(in),check(len(xsdot)>=cdof),depend(xsdot) :: cdof=len(xsdot)
         real(kind=realtype) dimension(warpmeshdof),intent(inout) :: outvec
         integer(kind=inttype), optional,intent(in),check(len(outvec)>=warpmeshdof),depend(outvec) :: warpmeshdof=len(outvec)
       end subroutine warpderivfwd

       subroutine getdxs(output,ndof) ! in :test:getdXs.F90
         real(kind=realtype) dimension(ndof),intent(inout) :: output
         integer(kind=inttype) optional,intent(in),check(len(output)>=ndof),depend(output) :: ndof=len(output)
       end subroutine getdxs
       
       subroutine verifywarpderiv(dxv_f,ndof_warp,dof_start,dof_end,h) ! in :test:warpDeriv.F90
         real(kind=realtype) dimension(ndof_warp) :: dxv_f
         integer(kind=inttype) optional,check(len(dxv_f)>=ndof_warp),depend(dxv_f) :: ndof_warp=len(dxv_f)
         integer(kind=inttype), intent(in) :: dof_start
         integer(kind=inttype), intent(in) :: dof_end
         real(kind=realtype), intent(in) :: h
       end subroutine verifywarpderiv

       subroutine writecgns(cgns_file)
         character*(*) :: cgns_file
       end subroutine writecgns

       subroutine writeplot3d(plot3d_file)
         character*(*) :: plot3d_file
       end subroutine writeplot3d

       subroutine releasememory
       end subroutine releasememory

        subroutine averagenormal(pts,conn,facesizes,npts,nconn,nfacesizes,avgnorm) ! in :test:patchIO.F90
          real(kind=realtype) dimension(npts),intent(in) :: pts
          integer(kind=inttype) dimension(nconn),intent(in) :: conn
          integer(kind=inttype) dimension(nfacesizes),intent(in) :: facesizes
          integer(kind=inttype), optional,intent(in),check(len(pts)>=npts),depend(pts) :: npts=len(pts)
          integer(kind=inttype), optional,intent(in),check(len(conn)>=nconn),depend(conn) :: nconn=len(conn)
          integer(kind=inttype), optional,intent(in),check(len(facesizes)>=nfacesizes),depend(facesizes) :: nfacesizes=len(facesizes)
          real(kind=realtype) dimension(3),intent(out) :: avgnorm
        end subroutine averagenormal

       module gridinput
         use constants
         real(kind=realtype) :: aexp
         real(kind=realtype) :: bexp
         real(kind=realtype) :: alpha
         real(kind=realtype) :: ldeffact
         real(kind=realtype) :: symmtol
         real(kind=realtype) :: errtol
         logical :: userotations
         logical :: zerocornerrotations
         real(kind=realtype) :: cornerangle
         integer(kind=inttype) :: evalmode
         integer(kind=inttype) :: eval_exact = 0
         integer(kind=inttype) :: eval_fast = 1
       end module gridinput

       module griddata ! in :idwarp:../modules/gridData.f90
         use constants
         integer(kind=inttype) :: warpmeshdof
         integer(kind=inttype) :: solvermeshdof
         integer(Kind=inttype) :: commonmeshdof
       end module griddata

       module cgnsgrid
         real(kind=realtype), dimension(:), allocatable :: surfacepoints
         integer(kind=inttype), dimension(:), allocatable :: surfaceconn
         logical, dimension(:), allocatable :: surfaceiswall
         logical, dimension(:), allocatable :: surfaceissymm
         integer(kind=inttype), dimension(:,:), allocatable :: surfacesizes
         integer(kind=inttype), dimension(:), allocatable :: surfaceptr
         integer(kind=inttype), dimension(:), allocatable :: surfacepatchptr
         character(32), dimension(:), allocatable :: surfacenames
         logical :: cgnsstructured
         subroutine getnpatch(npatches)
           integer(kind=inttype) intent(out) :: npatches
         end subroutine getnpatch
         subroutine getsurf(i,surf)
           integer(kind=inttype) intent(in) :: i
           character(32) intent(out) :: surf
         end subroutine getsurf
       end module cgnsgrid

       module plot3dsurface
         real(kind=realtype), dimension(:, :), allocatable :: pts
         integer(kind=inttype), dimension(:, :), allocatable :: conn
       end module plot3dsurface

       subroutine pointreduce(pts,n,tol,uniquepts,link,nunique) ! in :test:pointReduce.F90
         real(kind=realtype) dimension(3,n),intent(in) :: pts
         integer(kind=inttype), optional,intent(in),check(shape(pts,1)==n),depend(pts) :: n=shape(pts,1)
         real(kind=realtype) intent(in) :: tol
         real(kind=realtype) dimension(3,n),intent(out),depend(n) :: uniquepts
         integer(kind=inttype) dimension(n),intent(out),depend(n) :: link
         integer(kind=inttype) intent(out) :: nunique
        end subroutine pointreduce

       module kd_tree
         integer(kind=inttype) :: bucket_size
       end module kd_tree
       
    end interface 
#ifdef USE_COMPLEX
end python module libidwarp_cs
#else
end python module libidwarp
#endif

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
