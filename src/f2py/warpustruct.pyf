!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module warpustruct ! in 
    interface  ! in :warpustruct
        subroutine readunstructuredcgnsfile(cgns_file,comm) ! in :warpustruct:../IO/readUnstructuredCGNS.f90
            use griddata
            use communication
            use precision
            use cgnsdata
            character*(*) :: cgns_file
            integer(kind=inttype) :: comm
        end subroutine readunstructuredcgnsfile
        subroutine checkinfamilylist(familylist,famname,nfamily,index_bn) ! in :warpustruct:../IO/readUnstructuredCGNS.f90
            use precision
            use constants
            character dimension((32),32),intent(c) :: familylist
            character*32 :: famname
            integer(kind=inttype) :: nfamily
            integer(kind=inttype) :: index_bn
        end subroutine checkinfamilylist
        subroutine deallocatecgnsdata ! in :warpustruct:../IO/readUnstructuredCGNS.f90
            use griddata
            use communication
            use precision
        end subroutine deallocatecgnsdata
        subroutine setvolumecoordinates(zone,nzonesin,nvertices,vertices,initcall) ! in :warpustruct:../IO/setGetVolumeCoordinates.f90
            use griddata
            use precision
            integer(kind=inttype) :: zone
            integer(kind=inttype) :: nzonesin
            integer(kind=inttype), optional,check(shape(vertices,0)==nvertices),depend(vertices) :: nvertices=shape(vertices,0)
            real(kind=realtype) dimension(nvertices,3) :: vertices
            logical :: initcall
        end subroutine setvolumecoordinates
        subroutine getvolumecoordinates(zone,nvertices,vertices) ! in :warpustruct:../IO/setGetVolumeCoordinates.f90
            use griddata
            use precision
            integer(kind=inttype) :: zone
            integer(kind=inttype) :: nvertices
            real(kind=realtype) dimension(nvertices,3),intent(out),depend(nvertices) :: vertices
        end subroutine getvolumecoordinates
        subroutine getnvertices(zone,nvertices) ! in :warpustruct:../IO/setGetVolumeCoordinates.f90
            use griddata
            use precision
            integer(kind=inttype) intent(in) :: zone
            integer(kind=inttype) intent(out) :: nvertices
        end subroutine getnvertices
        subroutine writeunstructuredcgnsfile(cgns_file,comm) ! in :warpustruct:../IO/writeUnstructuredCGNS.f90
            use griddata
            use communication
            use precision
            use cgnsdata
            character*(*) :: cgns_file
            integer(kind=inttype) :: comm
        end subroutine writeunstructuredcgnsfile
        subroutine createsections(zone,nsections) ! in :warpustruct:../IO/createSections.f90
            use griddata
            use precision
            integer(kind=inttype) intent(in) :: zone
            integer(kind=inttype) intent(in) :: nsections
        end subroutine createsections
        subroutine setsectiontypes(zone,nsection,isvolumesec) ! in :warpustruct:../IO/createSections.f90
            use griddata
            use precision
            integer(kind=inttype) intent(in) :: zone
            integer(kind=inttype), optional,intent(in),check(len(isvolumesec)>=nsection),depend(isvolumesec) :: nsection=len(isvolumesec)
            logical dimension(nsection),intent(in) :: isvolumesec
        end subroutine setsectiontypes
        subroutine setsectiondata(zone,sec,seccounter,nelem,nnodeidx,secname,ebeg,eend,nodeindexlist,elemptr) ! in :warpustruct:../IO/createSections.f90
            use griddata
            use precision
            integer(kind=inttype) intent(in) :: zone
            integer(kind=inttype) intent(in) :: sec
            integer(kind=inttype) intent(in) :: seccounter
            integer(kind=inttype), optional,intent(in),check((len(elemptr)-1)>=nelem),depend(elemptr) :: nelem=(len(elemptr)-1)
            integer(kind=inttype), optional,intent(in),check(len(nodeindexlist)>=nnodeidx),depend(nodeindexlist) :: nnodeidx=len(nodeindexlist)
            character*32 :: secname
            integer(kind=inttype) intent(in) :: ebeg
            integer(kind=inttype) intent(in) :: eend
            integer(kind=inttype) dimension(nnodeidx) :: nodeindexlist
            integer(kind=inttype) dimension(nelem + 1) :: elemptr
        end subroutine setsectiondata
        subroutine setboundarydata(zone,sec,surfseccounter,famname,iswall,issymm,isboundary) ! in :warpustruct:../IO/createSections.f90
            use griddata
            use precision
            integer(kind=inttype) intent(in) :: zone
            integer(kind=inttype) intent(in) :: sec
            integer(kind=inttype) intent(in) :: surfseccounter
            character*32 :: famname
            logical :: iswall
            logical :: issymm
            logical :: isboundary
        end subroutine setboundarydata
        module communication ! in :warpustruct:../modules/communication.f90
            use precision
            integer(kind=inttype) :: warp_comm_self
            integer(kind=inttype) :: myid
            integer(kind=inttype) :: warp_comm_world
            integer(kind=inttype) :: nproc
        end module communication
        module griddata ! in :warpustruct:../modules/gridData.f90
            use gridtypes
            use precision
            use constants
!            type(zonedatatype), allocatable,dimension(:) :: griddoms
            real(kind=realtype) :: aexp
            integer(kind=inttype) :: nwallfamilies
            logical :: hassymmetry
            integer(kind=inttype) :: nsurfnodes
            real(kind=realtype) dimension(3) :: symdir
            integer(kind=inttype) :: nuniquesurfpoints
            real(kind=realtype) :: alpha
!            type(surfacepointtype), allocatable,dimension(:) :: uniquesurfacenodes
            integer(kind=inttype) :: nzones
            character dimension((32),32),intent(c) :: familylist
            integer(kind=inttype) :: physdim
            real(kind=realtype) :: bexp
            integer(kind=inttype) :: celldim
            real(kind=realtype) :: ldef
            integer(kind=inttype) :: nboundarynodes
            integer(kind=inttype) :: nuniqueboundarypoints
!            type(surfacepointtype), allocatable,dimension(:) :: uniqueboundarynodes
        end module griddata
        module cgnsdata ! in :warpustruct:../modules/cgnsData.f90
            use precision
            character*32 :: basename
            integer(kind=inttype) dimension(3) :: sizes
        end module cgnsdata
        subroutine getsurfaceelementcenterandarea ! in :warpustruct:../geoCalcs/getSurfaceElementCenters.f90
            use griddata
            use precision
        end subroutine getsurfaceelementcenterandarea
        subroutine getfulluniquesurfacenodelist ! in :warpustruct:../geoCalcs/getFullUniqueSurfaceNodeList.f90
            use griddata
            use communication
            use sortdata
            use precision
        end subroutine getfulluniquesurfacenodelist
        subroutine computenodalproperties(initialpoint) ! in :warpustruct:../geoCalcs/computeNodalProperties.f90
            use griddata
            use precision
            logical :: initialpoint
        end subroutine computenodalproperties
        subroutine getnpatches(npatches) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype) intent(out) :: npatches
        end subroutine getnpatches
        subroutine getpatchname(ipatch,patchname) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype) intent(in) :: ipatch
            character*32 intent(out) :: patchname
        end subroutine getpatchname
        subroutine getpatchindex(ipatch,patchindex) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype) intent(in) :: ipatch
            integer(kind=inttype) intent(out) :: patchindex
        end subroutine getpatchindex
        subroutine getpatchsize(patchindex,patchsize) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype) intent(in) :: patchindex
            integer(kind=inttype) intent(out) :: patchsize
        end subroutine getpatchsize
        subroutine getpatchindexlist(patchindex,patchsize,patchindices) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype) intent(in) :: patchindex
            integer(kind=inttype) intent(in) :: patchsize
            integer(kind=inttype) dimension(patchsize),intent(out),depend(patchsize) :: patchindices
        end subroutine getpatchindexlist
        subroutine getpatches(points,ndof) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            real(kind=realtype) dimension(ndof),intent(inout) :: points
            integer(kind=inttype), optional,intent(in),check(len(points)>=ndof),depend(points) :: ndof=len(points)
        end subroutine getpatches
        subroutine getsurfacecoordinates(npoints,indices,points) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype), optional,intent(in),check(len(indices)>=npoints),depend(indices) :: npoints=len(indices)
            integer(kind=inttype) dimension(npoints),intent(in) :: indices
            real(kind=realtype) dimension(3 * npoints),intent(inout),depend(npoints) :: points
        end subroutine getsurfacecoordinates
        subroutine setsurfacecoordinates(npoints,indices,points) ! in :warpustruct:../warp/patchIO.f90
            use griddata
            use precision
            use constants
            integer(kind=inttype), optional,intent(in),check(len(indices)>=npoints),depend(indices) :: npoints=len(indices)
            integer(kind=inttype) dimension(npoints),intent(in) :: indices
            real(kind=realtype) dimension(3 * npoints),intent(in),depend(npoints) :: points
        end subroutine setsurfacecoordinates
        subroutine updatevolumecoordinates ! in :warpustruct:../warp/updateVolumeCoordinates.f90
            use griddata
            use precision
        end subroutine updatevolumecoordinates
    end interface 
end python module warpustruct

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
